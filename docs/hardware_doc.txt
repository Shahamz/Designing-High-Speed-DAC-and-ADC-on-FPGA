Hardware documentation:
**************************
This document details the hardware logic design of the system, mainly of the PL (Programable Logic) side.
It includes the integration of several IPs and RTL blocks we have written. This design builds on an existing one from Analog Devices (as mentioned in the project report).

We will document here the crucial blocks in our design, but other components containting some auxilary functions (such as interconnects, reset derivers, ILAs for debugging, etc.) exist.

Note: many of the IPs in this design are wrapped in packes using Vivado IP packeger. To view their underlying structure you need to open them as a seperate vivado IP ackeger project.

sys_ps7 (zynq7 Processing system):
----------------------------------
This is the interface between the PL (fpga) and the PS (processor) on the zynq-7 SoC. It is responsible for configuring the PS-PL connection as well as the ddr and GPIOs. 
In the implementation, it integrates an SPI port, which is connected to the pins of the fmc connector, to the ad-fmcdaq2-ebz, enabling the PS to cinfigure the converters. It also integerates a DDR controller, and some other, less relevent ports.

dma_hier_0:
------------
This hierarchy contains the DMAs used to transfer data to and from the PL side and the DDR (memory).
There is one unit per converter. The axi_ad9680_dma is a stream-to-memory-mapped (S2MM) DMA, while the axi_ad9144_dma is memory-mapped-to-stream (MM2S). Both use axi-stream and axi3 protocols for data transfe.
Data coming from the ad9680, after being translated by the jesd204b block, is saved to memory via this dma.
The DMAs are configured by the PS (Processing System).

jesd_hier_0:
************
This hierarchy contains several important sub-hierarchies that implement the jesd204b protocol in hardware.

axi_ad9144_tpl:
---------------
This block implement the transport layer of the ad9144 DAC. It takes 128-bit data input (generated by the dds-compiler) and outputs the mapped data using axi-stream.

axi_ad9144_jesd:
----------------
This hierarchy is responsible of implementing the data link layer in the protocol. It takes in the output of the transport layer (tpl) and outputs the data ready to be serialized by the phy layer (xcvr). In our final implementation we use four lane set up to allow a fast transmission. For that we use 4 data path configuration (e.g. tx_phy*).
Note the sysref input for a successful link bring up (under subclass 1).

axi_ad9680_tpl & axi_ad9680_jesd:
---------------------------------
The ad9680 also dictates the same process for its transport and data link layer. The functionality of those blocks is exactly the same as in the case of the ad9144, but reversed (i.e. data is coming from the phy (xcvr and translated back through the data link IP, moving to the transport layer to be demapped). 

xcvr_hier_0:
------------
Just as done in the simulation, the phy layer is implemented as a transciever, meaning it servs both the Tx channel (for the DAC i.e. ad9680) and Rx channel (for the DAC i.e. ad9144). It integrates a four lane set up and configured by the PS.
In the Rx side, it takes the lanes data (i.e. rx_data_p_* & rx_data_n_* differential signals) and deserializes it, passing it on to the data layer.
In the Tx side, it outputs the serial data throue the lanes diferential signals (tx_data_p_* & rx_data_p_*)


axi_ad9144_offload & axi_ad9680_offload:
----------------------------------------
These blocks is resposible for the timing and synchronization, by storing incoming data from the axi-stream interface (DMA in case of the ad9144, and transport layer in case of the ad9680). It acts as a buffer that temporarily holds the data before it's read out.


